// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available
// (c) under license. The Rosetta software is developed by the contributing
// (c) members of the Rosetta Commons. For more information, see
// (c) http://www.rosettacommons.org. Questions about this can be addressed to
// (c) University of Washington UW TechTransfer,email:license@u.washington.edu.

/// @file protocols/simple_filters/ConstraintScoreFilter.cc
/// @brief Filter that computes scores of constraints generated by ConstraintGenerators
/// @author Tom Linsky (tlinsky@uw.edu)

#include <protocols/simple_filters/ConstraintScoreFilter.hh>
#include <protocols/simple_filters/ConstraintScoreFilterCreator.hh>

// Protocol headers
#include <protocols/constraint_generator/AddConstraints.hh>
#include <protocols/constraint_generator/util.hh>

// Core headers
#include <core/pose/Pose.hh>
#include <core/scoring/Energies.hh>
#include <core/scoring/ScoreFunction.hh>

// Basic/Utility headers
#include <basic/Tracer.hh>
#include <utility/string_util.hh>
#include <utility/tag/Tag.hh>

static THREAD_LOCAL basic::Tracer TR( "protocols.simple_filters.ConstraintScoreFilter" );

namespace protocols {
namespace simple_filters {

ConstraintScoreFilter::ConstraintScoreFilter():
	protocols::filters::Filter( "ConstraintScoreFilter" ),
	cgs_(),
	threshold_( 0.0 )
{
}

ConstraintScoreFilter::~ConstraintScoreFilter()
{}

void
ConstraintScoreFilter::parse_my_tag(
	utility::tag::TagCOP tag,
	basic::datacache::DataMap & data,
	protocols::filters::Filters_map const & ,
	protocols::moves::Movers_map const & ,
	core::pose::Pose const & )
{
	threshold_ = tag->getOption< core::Real >( "threshold", threshold_ );

	cgs_ = protocols::constraint_generator::parse_constraint_generators( tag, data );
	if ( cgs_.empty() ) {
		std::stringstream msg;
		msg << "ConstraintScoreFilter requires the constraint_generators' option. No constraint generators are current set."
			<< std::endl;
		throw utility::excn::EXCN_RosettaScriptsOption( msg.str() );
	}
}

protocols::filters::FilterOP
ConstraintScoreFilter::clone() const
{
	return protocols::filters::FilterOP( new ConstraintScoreFilter( *this ) );
}


protocols::filters::FilterOP
ConstraintScoreFilter::fresh_instance() const
{
	return protocols::filters::FilterOP( new ConstraintScoreFilter );
}

std::string
ConstraintScoreFilter::get_name() const
{
	return ConstraintScoreFilterCreator::filter_name();
}

bool
ConstraintScoreFilter::apply( core::pose::Pose const & pose ) const
{
	return ( report_sm( pose ) < threshold_ );
}

core::Real
ConstraintScoreFilter::report_sm( core::pose::Pose const & pose ) const
{
	core::pose::Pose posecopy( pose );
	posecopy.remove_constraints();
	posecopy.energies().clear();

	core::scoring::ScoreFunction sfx;
	sfx.set_weight( core::scoring::atom_pair_constraint, 1.0 );
	sfx.set_weight( core::scoring::angle_constraint, 1.0 );
	sfx.set_weight( core::scoring::backbone_stub_constraint, 1.0 );
	sfx.set_weight( core::scoring::dihedral_constraint, 1.0 );
	sfx.set_weight( core::scoring::coordinate_constraint, 1.0 );
	sfx.set_weight( core::scoring::res_type_constraint, 1.0 );

	protocols::constraint_generator::AddConstraints( cgs_ ).apply( posecopy );
	sfx.show( TR, posecopy );
	TR.flush();
	return sfx( posecopy );
}

void
ConstraintScoreFilter::report( std::ostream &, core::pose::Pose const & ) const
{

}

/////////////// Creator ///////////////

protocols::filters::FilterOP
ConstraintScoreFilterCreator::create_filter() const
{
	return protocols::filters::FilterOP( new ConstraintScoreFilter );
}

std::string
ConstraintScoreFilterCreator::keyname() const
{
	return ConstraintScoreFilterCreator::filter_name();
}

std::string
ConstraintScoreFilterCreator::filter_name()
{
	return "ConstraintScore";
}

} //protocols
} //simple_filters

