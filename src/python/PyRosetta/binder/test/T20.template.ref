// File: T20_template.cpp
#include <T20.template.hpp> // A
#include <T20.template.hpp> // A<int>::foo
#include <T20.template.hpp> // fi
#include <T20.template.hpp> // fi_instantiated_by_use_in_function
#include <T20.template.hpp> // foo

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
#endif

void bind_T20_template(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	// foo() file:T20.template.hpp line:18
	M("").def("foo_int_t", (void (*)()) &foo<int>, "doc");

	// foo() file:T20.template.hpp line:18
	M("").def("foo_double_t", (void (*)()) &foo<double>, "doc");

	{ // A file:T20.template.hpp line:25
		pybind11::class_<A<int>, std::shared_ptr<A<int>>> cl(M(""), "A_int_t");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
		cl.def_readwrite("t_value", &A<int>::t_value);
		cl.def("foo", (void (A<int>::*)(int &)) &A<int>::foo, "doc", pybind11::arg(""));
	}
	// fi_instantiated_by_use_in_function(class A<int>) file:T20.template.hpp line:34
	M("").def("fi_instantiated_by_use_in_function", (void (*)(class A<int>)) &fi_instantiated_by_use_in_function, "doc", pybind11::arg(""));

	// fi(class A<int> &) file:T20.template.hpp line:35
	M("").def("fi", (void (*)(class A<int> &)) &fi, "doc", pybind11::arg(""));

	// fi(class A<int> *) file:T20.template.hpp line:36
	M("").def("fi", (void (*)(class A<int> *)) &fi, "doc", pybind11::arg(""));

}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_T20_template(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_PLUGIN(T20_template) {
	std::map <std::string, std::shared_ptr<pybind11::module> > modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return * it->second;
	};

	modules[""] = std::make_shared<pybind11::module>("T20_template", "T20_template module");

	std::vector< std::pair<std::string, std::string> > sub_modules {
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = std::make_shared<pybind11::module>( modules[p.first]->def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() ) );

	bind_T20_template(M);

	return modules[""]->ptr();
}

// Source list file: /home/benchmark/rosetta/binder/main/source/src/python/PyRosetta/binder/test/build/T20_template.sources
// /home/benchmark/rosetta/binder/main/source/src/python/PyRosetta/binder/test/build/T20_template.cpp
// T20_template.cpp
